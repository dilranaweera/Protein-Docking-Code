import itertools
import pymol
from pymol import cmd

# Base cyclic peptide PDB file (this is your input structure)
base_pdb = "Conformer3D_cyclicRGDfV_CID44409460.pdb"  

# Load base peptide structure
cmd.load(base_pdb, "peptide")

# Define your specific RGD residues to manipulate (number positions in the peptide)
# Adjust based on your peptide sequence (example positions for R, G, D are 2, 4, 3)
positions = [2, 3, 4]
residues = ["R", "D", "G"]

# Generate all possible combinations of RGD in those 3 positions
combinations = itertools.product(residues, repeat=3)

# Loop through each combination
for index, combo in enumerate(combinations):
    # Create a new object for each combination
    new_object = f"peptide_{index}"
    
    # Create a copy of the original structure to manipulate
    cmd.create(new_object, "peptide")
    
    # Set the specific residues in the cyclic peptide
    for pos, new_res in zip(positions, combo):
        cmd.wizard("mutagenesis")
        cmd.get_wizard().set_mode(new_res)
        cmd.get_wizard().do_select(f"peptide and resi {pos}")
        cmd.get_wizard().apply()
        cmd.wizard("done")
    
    # Save the new PDB structure
    output_pdb = f"output_peptide_{index}.pdb"
    cmd.save(output_pdb, new_object)

cmd.quit()

Other Code from Perplexity: 

import random

# Define amino acids (excluding the one to be replaced)
amino_acids = ['ALA', 'ARG', 'ASN', 'ASP', 'CYS', 'GLN', 'GLU', 'GLY', 'HIS', 
               'ILE', 'LEU', 'LYS', 'MET', 'PHE', 'PRO', 'SER', 'THR', 'TRP', 'TYR', 'VAL']

def read_pdb(file_path):
    with open(file_path, 'r') as file:
        return file.readlines()

def write_pdb(file_path, pdb_data):
    with open(file_path, 'w') as file:
        file.writelines(pdb_data)

def mutate_residue(pdb_data, target_residue, target_position):
    new_residue = random.choice([aa for aa in amino_acids if aa != target_residue])
    modified_data = []
    
    for line in pdb_data:
        if line.startswith('ATOM') or line.startswith('HETATM'):
            residue_name = line[17:20].strip()
            residue_position = int(line[22:26])
            
            if residue_position == target_position and residue_name == target_residue:
                modified_line = line[:17] + new_residue + line[20:]
                modified_data.append(modified_line)
            else:
                modified_data.append(line)
        else:
            modified_data.append(line)
    
    return modified_data, new_residue

def main():
    input_file = 'input.pdb'
    output_file = 'output_mutated.pdb'
    target_residue = 'GLY'  # Example: targeting glycine
    target_position = 23    # Example: position 23

    pdb_data = read_pdb(input_file)
    modified_data, new_residue = mutate_residue(pdb_data, target_residue, target_position)
    write_pdb(output_file, modified_data)

    print(f"Mutation complete: {target_residue}{target_position} -> {new_residue}{target_position}")

if __name__ == "__main__":
    main()
