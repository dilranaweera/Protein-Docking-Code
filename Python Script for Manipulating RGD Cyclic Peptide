import itertools
import pymol
from pymol import cmd

# Base cyclic peptide PDB file (this is your input structure)
base_pdb = "Conformer3D_cyclicRGDfV_CID44409460.pdb"  

# Load base peptide structure
cmd.load(base_pdb, "peptide")

# Define your specific RGD residues to manipulate (number positions in the peptide)
# Adjust based on your peptide sequence (example positions for R, G, D are 2, 4, 3)
positions = [2, 3, 4]
residues = ["R", "D", "G"]

# Generate all possible combinations of RGD in those 3 positions
combinations = itertools.product(residues, repeat=3)

# Loop through each combination
for index, combo in enumerate(combinations):
    # Create a new object for each combination
    new_object = f"peptide_{index}"
    
    # Create a copy of the original structure to manipulate
    cmd.create(new_object, "peptide")
    
    # Set the specific residues in the cyclic peptide
    for pos, new_res in zip(positions, combo):
        cmd.wizard("mutagenesis")
        cmd.get_wizard().set_mode(new_res)
        cmd.get_wizard().do_select(f"peptide and resi {pos}")
        cmd.get_wizard().apply()
        cmd.wizard("done")
    
    # Save the new PDB structure
    output_pdb = f"output_peptide_{index}.pdb"
    cmd.save(output_pdb, new_object)

cmd.quit()

# Another possible script below...

import random
import numpy as np
from scipy.spatial.transform import Rotation as R

# Define amino acids (excluding the one to be replaced. In this case: GLY)
amino_acids = ['ALA', 'ARG', 'ASN', 'ASP', 'CYS', 'GLN', 'GLU', 'HIS', 
               'ILE', 'LEU', 'LYS', 'MET', 'PHE', 'PRO', 'SER', 'THR', 'TRP', 'TYR', 'VAL']

# Define amino acids with their approximate backbone coordinates
amino_acid_backbone_coords = {
    'ALA': np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 1.0, 0.0], [0.0, 1.0, 0.0]]),
}

def read_pdb(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.readlines()
    except FileNotFoundError:
        print(f'Error: The file {file_path} was not found.')
        return None
    except Exception as e:
        print(f'An error occurred while reading the file: {e}')
        return None

def write_pdb(file_path, pdb_data):
    try:
        with open(file_path, 'w') as file:
            file.writelines(pdb_data)
        print(f"Successfully wrote to {file_path}")
    except Exception as e:
        print(f'An error occurred while writing to the file: {e}')

def adjust_coordinates(line, new_coords):
    try:
        x, y, z = new_coords
        adjusted_line = f'{line[:30]}{x:8.3f}{y:8.3f}{z:8.3f}{line[54:]}'
        return adjusted_line
    except Exception as e:
        print(f"Error adjusting coordinates: {e}")
        return line

def check_binding_sites(pdb_data, target_position, threshold=7.0):
    ligand_atoms = []
    target_atoms = []

    for line in pdb_data:
        if line.startswith('HETATM'):
            x = float(line[30:38])
            y = float(line[38:46])
            z = float(line[46:54])
            ligand_atoms.append(np.array([x, y, z]))
        elif line.startswith('ATOM'):
            residue_position = int(line[22:26])
            if residue_position == target_position:
                x = float(line[30:38])
                y = float(line[38:46])
                z = float(line[46:54])
                target_atoms.append(np.array([x, y, z]))

    for ligand_atom in ligand_atoms:
        for target_atom in target_atoms:
            distance = np.linalg.norm(ligand_atom - target_atom)
            if distance < threshold:
                return False  # Too close to ligand, might disrupt binding
    return True

# def mutate_residue(pdb_data, target_residue, target_position):
#    new_residue = random.choice([aa for aa in amino_acids if aa != target_residue])
#    modified_data = []
    
#    if not check_binding_sites(pdb_data, target_position):
#        print("Mutation might disrupt ligand binding site. Aborting.")
#        return pdb_data, target_residue

#    for line in pdb_data:
#        if line.startswith('ATOM') or line.startswith('HETATM'):
#            try:
#                residue_name = line[17:20].strip()
#                residue_position = int(line[22:26])
                
#                if residue_position == target_position and residue_name == target_residue:
#                    if new_residue in amino_acid_backbone_coords:
#                        new_coords = amino_acid_backbone_coords[new_residue][0]  # Using first atom as reference
#                       adjusted_line = adjust_coordinates(line, new_coords)
#                       modified_line = adjusted_line[:17] + new_residue + adjusted_line[20:]
#                        modified_data.append(modified_line)
#                   else:
#                       print(f"Warning: No coordinate data for {new_residue}. Using original coordinates.")
#                        modified_line = line[:17] + new_residue + line[20:]
#                        modified_data.append(modified_line)
#                else:
#                    modified_data.append(line)
#            except ValueError as e:
#               print(f"Error parsing line: {line.strip()}. Error: {e}")
#               modified_data.append(line)
#       else:
#            modified_data.append(line)
    
#    return modified_data, new_residue

def main():
    input_file = 'rgdfm1.pdb'
    output_file = 'output_mutrgdfm1.pdb'
    target_residue = 'GLY'
    target_position = 5002

    pdb_data = read_pdb(input_file)
    if pdb_data:
        modified_data, new_residue = mutate_residue(pdb_data, target_residue, target_position)
        if modified_data != pdb_data:
            write_pdb(output_file, modified_data)
            print(f"Mutation complete: {target_residue}{target_position} -> {new_residue}{target_position}")
        else:
            print("Mutation was not performed due to potential disruption of structure or binding site.")

if __name__ == '__main__':
    main()
